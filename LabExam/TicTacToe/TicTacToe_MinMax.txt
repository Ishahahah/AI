package LAB;
import java.util.*;
public class minimaxalgo {
	
	
	
	    private static final char HUMAN_PLAYER = 'X';
	    private static final char AI_PLAYER = 'O';

	    public static void main(String[] args) {
	        char[][] board = {
	                {' ', ' ', ' '},
	                {' ', ' ', ' '},
	                {' ', ' ', ' '}
	        };

	        Scanner scanner = new Scanner(System.in);

	        while (true) {
	            printBoard(board);

	            // Human move
	            makeMove(board, HUMAN_PLAYER);

	            // Check for a win or a draw
	            if (checkWin(board, HUMAN_PLAYER)) {
	                printBoard(board);
	                System.out.println("You win!");
	                break;
	            } else if (isBoardFull(board)) {
	                printBoard(board);
	                System.out.println("It's a draw!");
	                break;
	            }

	            // AI move
	            makeAIMove(board);

	            // Check for a win or a draw
	            if (checkWin(board, AI_PLAYER)) {
	                printBoard(board);
	                System.out.println("AI wins!");
	                break;
	            } else if (isBoardFull(board)) {
	                printBoard(board);
	                System.out.println("It's a draw!");
	                break;
	            }
	        }

	        scanner.close();
	    }

	    private static void printBoard(char[][] board) {
	        System.out.println("  0 1 2");
	        for (int i = 0; i < 3; i++) {
	            System.out.print(i + "|");
	            for (int j = 0; j < 3; j++) {
	                System.out.print(board[i][j] + "|");
	            }
	            System.out.println("\n  -----");
	        }
	    }

	    private static void makeMove(char[][] board, char player) {
	        Scanner scanner = new Scanner(System.in);

	        while (true) {
	            System.out.println("Enter your move (row and column): ");
	            int row = scanner.nextInt();
	            int col = scanner.nextInt();

	            if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
	                board[row][col] = player;
	                break;
	            } else {
	                System.out.println("Invalid move. Try again.");
	            }
	        }
	    }

	    private static void makeAIMove(char[][] board) {
	        int[] bestMove = findBestMove(board);
	        board[bestMove[0]][bestMove[1]] = AI_PLAYER;
	    }

	    private static int[] findBestMove(char[][] board) {
	        int[] bestMove = {-1, -1};
	        int bestScore = Integer.MIN_VALUE;

	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                if (board[i][j] == ' ') {
	                    board[i][j] = AI_PLAYER;
	                    int score = minimax(board, 0, false);
	                    board[i][j] = ' '; // Undo the move

	                    if (score > bestScore) {
	                        bestScore = score;
	                        bestMove[0] = i;
	                        bestMove[1] = j;
	                    }
	                }
	            }
	        }

	        return bestMove;
	    }

	    private static int minimax(char[][] board, int depth, boolean isMaximizing) {
	        if (checkWin(board, HUMAN_PLAYER)) {
	            return -1;
	        } else if (checkWin(board, AI_PLAYER)) {
	            return 1;
	        } else if (isBoardFull(board)) {
	            return 0;
	        }

	        if (isMaximizing) {
	            int bestScore = Integer.MIN_VALUE;

	            for (int i = 0; i < 3; i++) {
	                for (int j = 0; j < 3; j++) {
	                    if (board[i][j] == ' ') {
	                        board[i][j] = AI_PLAYER;
	                        int score = minimax(board, depth + 1, false);
	                        board[i][j] = ' '; // Undo the move
	                        bestScore = Math.max(bestScore, score);
	                    }
	                }
	            }

	            return bestScore;
	        } else {
	            int bestScore = Integer.MAX_VALUE;

	            for (int i = 0; i < 3; i++) {
	                for (int j = 0; j < 3; j++) {
	                    if (board[i][j] == ' ') {
	                        board[i][j] = HUMAN_PLAYER;
	                        int score = minimax(board, depth + 1, true);
	                        board[i][j] = ' '; // Undo the move
	                        bestScore = Math.min(bestScore, score);
	                    }
	                }
	            }

	            return bestScore;
	        }
	    }

	    private static boolean checkWin(char[][] board, char player) {
	        // Check rows, columns, and diagonals for a win
	        for (int i = 0; i < 3; i++) {
	            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
	                return true; // Row win
	            }
	            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
	                return true; // Column win
	            }
	        }
	        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
	            return true; // Diagonal win (top-left to bottom-right)
	        }
	        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
	            return true; // Diagonal win (top-right to bottom-left)
	        }

	        return false;
	    }

	    private static boolean isBoardFull(char[][] board) {
	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                if (board[i][j] == ' ') {
	                    return false;
	                }
	            }
	        }
	        return true;
	    
	}}














Sure, let's break down the code and explain its logic step by step.

### Theory Explanation:

#### Overview:
The provided code implements the minimax algorithm for a Tic-Tac-Toe game where a human player competes against an AI player. The goal of the AI player is to make optimal moves to either win the game or force a draw.

#### Components:
1. **Constants**:
   - `HUMAN_PLAYER`: Represents the symbol for the human player (X).
   - `AI_PLAYER`: Represents the symbol for the AI player (O).

2. **Main Method** (`main`):
   - Initializes the game board and starts the game loop.
   - Alternates between human and AI moves until the game ends (either a win or a draw).

3. **Printing the Board** (`printBoard`):
   - Prints the current state of the game board to the console.

4. **Human Move** (`makeMove`):
   - Allows the human player to input their move (row and column).
   - Validates the move and updates the board accordingly.

5. **AI Move** (`makeAIMove`):
   - Uses the minimax algorithm to find the best move for the AI player.
   - Updates the board with the AI player's move.

6. **Finding the Best Move** (`findBestMove`):
   - Determines the best move for the AI player using the minimax algorithm.
   - Evaluates all possible moves recursively to find the optimal move.
   - Returns the coordinates of the best move.

7. **Minimax Algorithm** (`minimax`):
   - Recursively evaluates the game state to determine the best score for the AI player.
   - Implements both maximizing and minimizing steps for the AI and human players.
   - Returns the best score for the current game state.

8. **Checking for a Win** (`checkWin`):
   - Checks the game board to see if a player has won.
   - Checks rows, columns, and diagonals for a winning combination.
   - Returns true if a win is detected for the specified player.

9. **Checking for a Draw** (`isBoardFull`):
   - Checks if the game board is full, indicating a draw.
   - Returns true if the board is full and false otherwise.

#### Logic Explanation:
1. **Game Initialization**:
   - The game starts by initializing an empty 3x3 game board.

2. **Game Loop**:
   - The game loop continues until either the human player wins, the AI player wins, or the game ends in a draw.
   - In each iteration, the current state of the board is printed, and then either the human player or the AI player makes a move.

3. **Human Move**:
   - The human player is prompted to input their move (row and column).
   - If the move is valid, the board is updated with the human player's move.

4. **AI Move**:
   - The AI player calculates the best move using the minimax algorithm.
   - The board is updated with the AI player's move.

5. **Win or Draw Check**:
   - After each move, the game checks if either player has won or if the game has ended in a draw.
   - If a win or draw is detected, the game loop breaks, and the corresponding message is printed.

6. **Minimax Algorithm**:
   - The minimax algorithm is used by the AI player to determine the best move.
   - It recursively evaluates all possible moves to find the optimal move that maximizes the AI player's chances of winning or minimizes the human player's chances of winning.

7. **Win Detection**:
   - The game checks for a win by examining the rows, columns, and diagonals of the game board.
   - If a winning combination is found for either player, the game declares the winner.

8. **Draw Detection**:
   - If the game board is full and no player has won, the game ends in a draw.

#### Conclusion:
Overall, the code implements a fully functional Tic-Tac-Toe game where an AI player employs the minimax algorithm to make optimal moves. The game provides an engaging experience for the human player, challenging them to compete against an intelligent AI opponent.
