import java.util.*;

public class nqueen {
    static int N; // Define N as a class variable
    static List<int[][]> solutions = new ArrayList<>();

    // Function to check if placing a queen at (row, col) is safe
    static boolean isSafe(int[][] board, int row, int col) {
        // Queens in the same column
        for (int i = 0; i < row; ++i)
            if (board[i][col] == 1)
                return false;

        // Upper left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; --i, --j)
            if (board[i][j] == 1)
                return false;

        // Upper right diagonal
        for (int i = row, j = col; i >= 0 && j < N; --i, ++j)
            if (board[i][j] == 1)
                return false;

        return true;
    }

    static boolean solveNQueens(int[][] board, int row) {
        if (row == N) { // all queens are placed
            // Store the solution
            int[][] solution = new int[N][N];
            for (int i = 0; i < N; ++i)
                solution[i] = board[i].clone();
            solutions.add(solution);
            return false; // continue to find all solutions
        }

        for (int col = 0; col < N; ++col) {
            if (isSafe(board, row, col)) {
                board[row][col] = 1; // Place the queen

                // Recur to place rest of the queens
                solveNQueens(board, row + 1);
                
                // If it doesn't lead to a solution, backtrack
                board[row][col] = 0;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);
        System.out.print("Enter the value of N: ");
        N = sc.nextInt(); // Read N from user input
        int[][] board = new int[N][N]; // Initialize chessboard

        solveNQueens(board, 0);

        if (solutions.isEmpty()) {
            System.out.println("Solution does not exist.");
        } else {
            for (int[][] solution : solutions) {
                for (int i = 0; i < N; ++i) {
                    for (int j = 0; j < N; ++j)
                        System.out.print(solution[i][j] + " ");
                    System.out.println();
                }
                System.out.println();
            }
        }
    }
}






Code Explanation:
1.	Constants:
•	N: Represents the size of the chessboard (N×N).
2.	isSafe Function:
•	Checks if placing a queen at a given position (row, col) is safe.
•	Checks for conflicts with queens already placed in the same column, upper left diagonal, and upper right diagonal.
3.	solveNQueens Function:
•	Recursive function to solve the N-Queens problem.
•	Base Case: If all queens are placed (reaches row == N), prints the board configuration.
•	Recursive Step:
•	Iterates through each column in the current row.
•	If placing a queen at (row, col) is safe, marks that position as a queen (board[row][col] = 1) and recursively calls solveNQueens for the next row.
•	If the recursive call returns true (i.e., a solution is found), returns true.
•	If the recursive call returns false, backtracks by removing the queen from (row, col) and tries the next column.
•	Returns false if no solution is found.
4.	main Method:
•	Initializes an empty chessboard represented by a 2D array board.
•	Calls solveNQueens with the initial row set to 0.
•	Prints "Solution does not exist." if no solution is found.
Logic and Concepts:
•	Backtracking:
•	The code uses a recursive backtracking approach to explore all possible queen placements.
•	It tries different configurations and backtracks whenever it reaches an invalid configuration.
•	Safety Checking:
•	The isSafe function ensures that queens are placed in positions where they do not threaten each other.
•	It checks for conflicts with queens in the same row, column, and diagonals.
•	Recursion:
•	The solveNQueens function recursively places queens on the chessboard row by row.
•	It explores all possible configurations until a valid solution is found or all possibilities are exhausted.
•	Complexity:
•	The time complexity of the algorithm is exponential, as it explores all possible configurations of queens on the chessboard.
•	However, using backtracking and pruning invalid configurations helps reduce the search space.
•	Optimization:
•	The code optimizes the solution space by pruning branches that cannot lead to a valid solution.
•	It avoids unnecessary computations by using the isSafe function to check for conflicts before proceeding with the placement of each queen.


The code you've provided is indeed a solution to the N-Queens problem using a backtracking approach, which can be considered a form of Constraint Satisfaction Problem (CSP). Here’s an explanation of how it works and how it fits the CSP framework:

Explanation of the Code
Class and Main Method:

The nqueen class includes the main method where the program starts.
The value of N is read from the user input, which defines the size of the chessboard (N x N).
isSafe Method:

This method checks whether placing a queen at position (row, col) is safe.
It ensures no other queens are in the same column, and on the same upper left or upper right diagonals.
solveNQueens Method:

This is a recursive method that attempts to place queens row by row.
If all queens are placed (row == N), it prints the board and returns true.
For each column in the current row, it checks if placing a queen is safe.
If placing the queen leads to a solution (solveNQueens(board, row + 1) returns true), it keeps the queen there.
If not, it backtracks by removing the queen and trying the next column.
Main Execution:

The main method initializes the board and calls solveNQueens.
If no solution is found, it prints "Solution does not exist."
How It Fits the CSP Framework
A Constraint Satisfaction Problem (CSP) is defined by:

Variables: The positions of queens on the board.
Domains: Possible positions on the board (each queen can be placed in any cell of a row).
Constraints: No two queens can attack each other, which translates to no two queens sharing the same row, column, or diagonal.
The N-Queens problem is a classic example of a CSP:

Variables: Positions of the queens in each row.
Domains: Columns in which a queen can be placed in each row.
Constraints: The isSafe function ensures the constraints are respected by checking columns and diagonals.
The backtracking algorithm used here systematically tries to place queens while adhering to these constraints. If it encounters a conflict, it backtracks to the previous step and tries the next possibility, which is a common approach in solving CSPs

